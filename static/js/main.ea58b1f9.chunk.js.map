{"version":3,"sources":["components/forms/componentsForm/ContactForm/Input.jsx","components/forms/componentsForm/ContactForm/Radio.jsx","components/forms/componentsForm/FormButton.jsx","components/forms/componentsForm/ContactForm/ContactInfo.jsx","components/forms/componentsForm/FormSearch/Select.jsx","components/forms/componentsForm/FormSearch/InfoCar.jsx","components/forms/componentsForm/FormSearch/FormSearch.jsx","components/forms/FormSection.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","className","placeholder","type","required","Radio","name","FormButton","textButton","ContactInfo","Select","listOption","selectedOption","useState","value","setValue","showList","setDisplayList","onClick","map","option","key","event","target","innerHTML","optionHandler","InfoCar","FormSearch","FormSection","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea58b1f9.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../../style/input.css';\r\n\r\nexport default function Input({className, placeholder, type, required }) {\r\n  if (required) {\r\n    return (\r\n      <div className=\"input-wrapper\">\r\n        <input type={type} className={`input-control ${className}`} required />       \r\n        <div className=\"placeholder\">{placeholder}<span className=\"requiredField\">*</span></div>\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"input-wrapper\">\r\n      <input type={type} className={`${className}`} placeholder={placeholder} />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport '../../style/radio.css';\r\n\r\nexport default function Radio() {\r\n  return (\r\n    <div className=\"contact-radio\">\r\n      <label className=\"radio\">\r\n        <input type=\"radio\" name=\"contact\" />\r\n        <div className=\"radio__text\">Prefer e-mail</div>\r\n      </label>\r\n      <label className=\"radio\">\r\n        <input type=\"radio\" name=\"contact\"/>\r\n        <div className=\"radio__text\">Prefer phone</div>\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport '../style/btn.css';\r\n\r\nexport default function FormButton({className, textButton}) {\r\n  return (\r\n    <button className={className}>\r\n      {textButton}\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport Input from './Input';\r\nimport Radio from './Radio';\r\nimport FormButton from '../FormButton';\r\n\r\nexport default function ContactInfo() {\r\n  return (\r\n    <section className=\"contact\">\r\n      <div className=\"contact-wrapper\">\r\n        <h2 className=\"contact-h2\">Contact info</h2>\r\n        <p className=\"contact-text\">\r\n          We appreciate your interest in our inventory, \r\n          and apologize we do not have model details displaying on the website at this time.\r\n        </p>\r\n        <p className=\"contact-text\">\r\n          Please fill the form out below and our team will quickly respond, \r\n          or, please call us at 765-470-4091 for more information.\r\n        </p>\r\n        <div className=\"contact-conteinerField\">\r\n          <Input type=\"text\" placeholder=\"First Name\" required={true} className=\"contact-field contact-field__name\" />\r\n          <Input type=\"text\" placeholder=\"Last Name\" required={true} className=\"contact-field contact-field__name\" />\r\n          <Input type=\"text\" placeholder=\"Email\" required={true} className=\"contact-field contact-field__name\" />\r\n          <Input type=\"text\" placeholder=\"Phone\" required={false} className=\"contact-field contact-field__name\" />\r\n        </div>\r\n        <div className=\"contact-sectionBottom\">\r\n          <Radio />\r\n          <div className=\"btn-wrapper\">\r\n            <FormButton className=\"form-btn\" textButton=\"Contact Us\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\r\nimport '../../style/select.css';\r\n\r\nexport default function Select({listOption, selectedOption, className}) {\r\n  const [value, setValue] = useState(selectedOption)\r\n  const [showList, setDisplayList] = useState(false)\r\n\r\n  function optionHandler({ target }) {\r\n    setValue(target.innerHTML);\r\n    setDisplayList(false);\r\n  }\r\n  return (\r\n    <div className={`select ${className} ${showList ? 'select-priory' : 'select-closedList'}`}>\r\n      <div \r\n        className={`select-option select-option__selected ${showList ? 'openList' : ''}`}\r\n        onClick={() => setDisplayList(!showList)}\r\n      >\r\n        {value}\r\n        {value === selectedOption ? <span className=\"requiredField\">*</span> : null }\r\n      </div>\r\n      <div className={`select-displayList ${showList ? 'select-displayList__show' : ''}`}>\r\n        {listOption.map(option => {\r\n          if (option === value) {\r\n            return null;\r\n          };\r\n          return <div\r\n            key={option} \r\n            className=\"select-option\"\r\n            onClick={(event) => optionHandler(event)}\r\n          >\r\n            {option}\r\n          </div>\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport Select from './Select';\r\n\r\nexport default function InfoCar() {\r\n  const listCar = ['Audi', 'Nissan', 'Volkswagen', 'Mitsubishi'];\r\n  const listTypeCar = ['Any type (New and Pre-Owned)', 'New', 'Pre-Owned'];\r\n  const listYearFrom = ['From 1999', 'From 2000'];\r\n  const listYearTo = ['To 2019', 'To 2018'];\r\n  const listModel = ['Q5', 'Q7', 'Q8', 'Q3'];\r\n  const listPrice = ['Price(max)', '2000', '1500', '1000']\r\n\r\n  return (\r\n    <section className=\"infoCar\">\r\n      <div className=\"infoCar-leftSection\">\r\n        <Select listOption={listTypeCar} className=\"select-carType\" selectedOption=\"Any type (New and Pre-Owned)\" />\r\n        <Select listOption={listCar} className=\"select-car\" selectedOption=\"Audi\" />\r\n        <Select listOption={listPrice} className=\"select-price\" selectedOption=\"Price(max)\" />\r\n      </div>\r\n      <div className=\"infoCar-rightSection\">\r\n        <div className=\"infoCar-yearInfo\">\r\n           <Select listOption={listYearFrom} className=\"select-year\" selectedOption=\"From 1999\" />\r\n           <span className=\"devide\" />\r\n           <Select listOption={listYearTo} className=\"select-year\" selectedOption=\"To 1999\" />\r\n        </div>\r\n        <Select className=\"select-model\" listOption={listModel} selectedOption=\"Q5\" />\r\n        <div className=\"infoCar-specific\">\r\n          <Select className=\"select-trim\" listOption={['some text1', 'some text2']} selectedOption=\"trim\" />\r\n          <Select className=\"select-color\" listOption={['black', 'white']} selectedOption=\"color\" />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport InfoCar from './InfoCar';\r\nimport FormButton from '../FormButton';\r\n\r\nexport default function FormSearch() {\r\n  return (\r\n    <section className=\"formSearch\">\r\n      <div className=\"formSearch-wrapper\">\r\n        <h1 className=\"formSearch-h1\">CAN'T FIND WHAT YOU LOOKING FOR?</h1>\r\n          <InfoCar />\r\n          <div className=\"formSearch-inputWrapper\">\r\n            <input type=\"text\" className=\"formSearch-input\" placeholder=\"You message\" />\r\n          </div>\r\n          <p className=\"formSearch-p\">\r\n            By submitting this form, you agree to be contacted with information regarding the vehicle you are searching for\r\n          </p>\r\n          <div className=\"btn-wrapper\">\r\n            <FormButton className=\"form-btn\" textButton=\"let us find it\" />\r\n          </div>\r\n      </div>\r\n \r\n    </section>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport ContactInfo from './componentsForm/ContactForm/ContactInfo';\r\nimport FormSearch from './componentsForm/FormSearch/FormSearch';\r\nimport './style/style.css';\r\n\r\nexport default function FormSection() {\r\n  return (\r\n    <div className=\"formSection\">\r\n      <ContactInfo />\r\n      <FormSearch />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport FormSection from './components/forms/FormSection';\nimport './App.css';\n\nfunction App() {\n  return (\n    <main className=\"App\">\n      <FormSection />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}